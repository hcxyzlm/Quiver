{
  "title": "函数式编程",
  "cells": [
    {
      "type": "markdown",
      "data": "函数式编程是一种编程规范，属于结构化编程的一种，主要是把运算过程尽量写成嵌套的函数调用，\n比如： (1+2) * 3 -4; 传统语法：var a = 1+2, var b = a * 3, var result = b - 4,如果是函数式，则要求运算过程定义为不同的函数。\n可能式这样写: var result = sub(mul(add(1, 2), 3), 4)\n\n### 函数式编程的特定\n1. 函数式第一个公民，函数可以作为参数，可以赋值给其他变量，可以作为函数的返回值\n2. 只用表达式，不用语句，表达式式单纯运算的过程，总式有返回值，语句是执行某种操作，没有返回值。函数式编程，要求只使用表达式，不使用语句\n3. 没有副作用，副作用指的式函数内部与外部互动(比如修改全局变量的值)，产生运算之外的其他结果，没有副作用意味着函数要保持独立，所有的功能都是新的值。\n4. 不修改状态，函数式编程只是返回一个新的值，不修改系统变量。\n5. 引用透明，函数的运行不依赖外部变量或者状态，只依赖输入的参数\n6. 函数只能有一个参数\n\n例子\n```swift\nclass SumValue {\n    var  value: Int = 0\n    init(_ value: Int) {\n        self.value = value\n    }\n    \n    func add(_ num: Int) -> SumValue {\n        let new = SumValue(value)\n        new.value += num\n        return new\n    }\n    \n    func mul(_ num: Int) -> SumValue {\n        let new = SumValue(value)\n        new.value = new.value * num\n        return new\n    }\n    \n    func sub(_ num: Int) -> SumValue {\n        let new = SumValue(value)\n        new.value = new.value - num\n        return new\n    }\n}\n\nlet result = SumValue(1).add(2).mul(3).sub(4)\nprint(result.value)\n```"
    }
  ]
}