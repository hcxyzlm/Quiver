{
  "title": "quartz2d使用",
  "cells": [
    {
      "type": "markdown",
      "data": "# Quartz2D\n\n## 简介\n- Quartz2D的API是纯C语言的，所以ARC环境下还是需要我们手动进行Quartz2D的内存管理\n    - 使用含有“Create”或“Copy”的函数创建的对象，使用完后必须释放，否则将导致内存泄露；使用不含有“Create”或“Copy”的函数获取的对象，则不需要释放；如果retain了一个对象，不再使用时，需要将其release掉\n    - 可以使用Quartz 2D的函数来指定retain和release一个对象。例如，如果创建了一个CGColorSpace对象，则使用函数CGColorSpaceRetain和CGColorSpaceRelease来retain和release对象\n    - 也可以使用CoreFoundation的CFRetain和CFRelease。注意不能传递NULL值给这些函数\n\n## Quartz2D的坐标\n- 默认的坐标系统是: (0, 0)在左下角，沿着X轴从左到右坐标值逐渐增大，沿着Y轴从下到上左键增加\n- 坐标系转换:"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "相对原点旋转上下文坐标系\n-CGContextRotateCTM(CGContextRef c, CGFloat angle)\n//相对原点平移上下文坐标系\nCGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)\n// 缩放上下文坐标系\nCGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)"
    },
    {
      "type": "markdown",
      "data": "- 注意: 转换坐标系前，使用方法保存当前上下文状态\n- CGContextSaveGState(CGContextRef c)\n- 坐标系转换后，使用方法恢复之前保存的上下文状态\n- CGContextRestoreGState(CGContextRef c)\n\n##Quartz2D的用途\n- 绘制图形 : 线条\\三角形\\矩形\\圆\\弧等\n- 绘制文字\n- 绘制\\生成图片(图像)\n- 读取\\生成PDF\n- 截图\\裁剪图片\n- 自定义UI控件\n\n## 图形上下文\n- 图形上下文是一个CGContextRef类型的数据，Quartz2D的所有类名和方法都已CG为开头。\n- 绘图：绘制好的图形->保存到图形上下文->输出目标(显示)\n获取图形上下文: CGContextRef ctx = UIGraphicsGetCurrentContext();\n\n## 自定义控件步骤\n- 1. 新建一个类，继承自UIView\n- 2. 实现自定义-(void)drawRect:(CGRect)rect方法，然后在这个方法中\n    - 1.获取上下文\n    - 2.创建路径（描述路径）\n    - 3.把路径添加到上下文\n    - 4.渲染上下文\n- 代码"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "//获取上下文\n    CGContextRef ref = UIGraphicsGetCurrentContext();\n//画线段\n    CGContextSetLineWidth(ref, 2);\n    新建一个起点\n    CGContextMoveToPoint(ref, 10, 10);\n    添加新的线段到某个点\n    CGContextAddLineToPoint(ref, 100, 100);\n    // 添加一个矩形\n    void CGContextAddRect(CGContextRef c, CGRect rect)\n    添加一个椭圆\nvoid CGContextAddEllipseInRect(CGContextRef context, CGRect rect)\n添加一个圆弧\nvoid CGContextAddArc(CGContextRef c, CGFloat x, CGFloat y,\n  CGFloat radius, CGFloat startAngle, CGFloat endAngle, int clockwise)\n  常用绘制路径函数\nMode参数决定绘制的模式\nvoid CGContextDrawPath(CGContextRef c, CGPathDrawingMode mode)\n绘制空心路径\nvoid CGContextStrokePath(CGContextRef c)\n绘制实心路径\nvoid CGContextFillPath(CGContextRef c)\n提示：一般以CGContextDraw、CGContextStroke、CGContextFill开头的函数，都是用来绘制路径的\n    // 渲染上下文\n    CGContextStrokePath(ref);\n//图形上下文栈的操作\n将当前的上下文copy一份,保存到栈顶(那个栈叫做”图形上下文栈”)\nvoid CGContextSaveGState(CGContextRef c)\n将栈顶的上下文出栈,替换掉当前的上下文\nvoid CGContextRestoreGState(CGContextRef c)"
    },
    {
      "type": "markdown",
      "data": "\n## UIBezierPath\n- 作用: 可以把多个绘图的步骤合在一起，画线和画矩阵可以操作，放到一个路径中操作"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "// 创建路径\n    UIBezierPath *path = [UIBezierPath bezierPath];\n    [path moveToPoint:CGPointMake(0, 0)];\n    [path addLineToPoint:CGPointMake(0, 50)];\n    [path addLineToPoint:CGPointMake(50, 50)];\n    [path addLineToPoint:CGPointMake(50, 0)];\n\n    [path fill]; // 画实心\n    [path stroke]; // 画空心\n    // 添加绘制路径到上下文\n    CGContextAddPath(ref, path)"
    },
    {
      "type": "markdown",
      "data": "## - (void)drawRect:(CGRect)rect\n- 什么时候调用？\n- 当view第一次显示到屏幕上时（被加到UIWindow上显示出来）\n- 调用view的setNeedsDisplay或者setNeedsDisplayInRect:时\n\n## 画文字"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "- (void) drawString:(NSString*) str {\n\n    NSMutableDictionary *dict = [NSMutableDictionary dictionary];\n    dict[NSFontAttributeName] = [UIFont systemFontOfSize:15];\n    dict[NSForegroundColorAttributeName] = [UIColor redColor];\n    dict[NSStrokeWidthAttributeName] = @5;\n\n    CGRect ret = CGRectMake(100, 100, 50, 20);\n    // 需要先画一个矩形出来，然后在矩形上面画东西\n    UIRectClip(ret);\n    [str drawInRect:ret withAttributes:dict];\n}"
    },
    {
      "type": "markdown",
      "data": "## 画图片"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "- (void)drawRect:(CGRect)rect\n{\n    // Drawing code\n\n    // 搞个图片\n    UIImage *image = [UIImage imageNamed:@\"阿狸\"];\n\n    // 1.画左上角，默认和图片大小一样\n//    [image drawAtPoint:CGPointZero];\n\n\n\n    // 2.可以设置图片的尺寸\n    CGRect r = CGRectMake(0, 0, 100, 100);\n//    [image drawInRect:r];\n\n    // 3.平铺\n    //image = [UIImage imageNamed:@\"001\"];\n    [image drawAsPatternInRect:rect];\n\n    // 4.裁剪,超出矩形的部分都不会显示，注意只会影响后面添加的路径\n    UIRectClip(r);\n\n\n\n}"
    },
    {
      "type": "markdown",
      "data": "\n## 上下文保存于恢复\n- 保存上下文到栈中\n- CGContextSaveGState(ref);会拷贝一份到内存中\n- 恢复原来的上下文\n- CGContextRestoreGState\n\n## 图片的裁剪\n- 图片核心代码:"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "创建一个位图的上下文\nUIGraphicsBeginImageContextWithOptions ( CGSize size, BOOL opaque, CGFloat scale );\nparam:opaque YES 为不透明 NO为透明\n// 从上下文中取得图片（UIImage）\nUIImage* UIGraphicsGetImageFromCurrentImageContext();\n// 结束上下文\nvoid     UIGraphicsEndImageContext();"
    },
    {
      "type": "markdown",
      "data": "- 图片裁剪核心代码\n- void CGContextClip(CGContextRef c); // 将当前上下文所绘制的路径裁剪出来(超过这个裁剪区域都不能展示)\n- 屏幕截屏核心代码- (void)renderInContext:(CGContextRef)ctx\n- 可以直接用view.layer调用即可\n"
    }
  ]
}