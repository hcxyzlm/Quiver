{
  "title": "父子控制器",
  "cells": [
    {
      "type": "markdown",
      "data": "# 父子控制器\n## 控制器父子关系的建立原则\n- 如果2个控制器的view是父子关系(不管是直接还是间接的父子关系)，那么这2个控制器也应该为父子关系\n"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "[a.view addSubview:b.view];\n[a addChildViewController:b];\n// 或者\n[a.view addSubview:otherView];\n[otherView addSubbiew.b.view];\n[a addChildViewController:b];"
    },
    {
      "type": "markdown",
      "data": "\n## 获得所有的子控制器"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "@property(nonatomic,readonly) NSArray *childViewControllers;"
    },
    {
      "type": "markdown",
      "data": "\n## 添加一个子控制器"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "//XMGOneViewController成为了self的子控制器\n//self成为了XMGOneViewController的父控制器\n[self addChildViewController:[[XMGOneViewController alloc] init]];\n// 通过addChildViewController添加的控制器都会存在于childViewControllers数组中"
    },
    {
      "type": "markdown",
      "data": "\n## 获得父控制器"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "@property(nonatomic,readonly) UIViewController *parentViewController;"
    },
    {
      "type": "markdown",
      "data": "\n## 将一个控制器从它的父控制器中移除"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "// 控制器a从它的父控制器中移除\n[a removeFromParentViewController];"
    },
    {
      "type": "markdown",
      "data": "\n## willMoveToParentViewController方法\n- 当我们向我们的视图控制器容器中调用removeFromParentViewController方法时，必须要先调用该方法，且parent参数为nil:\n    - [将要删除的视图控制器 willMoveToParentViewController: nil];\n    - [将要删除的视图控制器 removeFromParentViewController: 父];\n- 当我们调用addChildViewController方法时，在添加子视图控制器之前将自动调用该方法。所以，就不需要我们显示调用了\n\n## didMoveToParentViewController方法\n- 当从一个视图控制容器中添加或者移除viewController后，该方法被调用\n- 当我们向我们的视图控制器容器中添加（或者删除）子视图控制器后，必须调用该方法，告诉iOS，已经完成添加（或删除）子控制器的操作。"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "[视图控制器 addChildViewController: nil];\n[视图控制器 didMoveToParentViewController: 父];"
    },
    {
      "type": "markdown",
      "data": "- removeFromParentViewController方法会自动调用了该方法，所以，删除子控制器后，不需要在显示的调用该方法了。\n### 归纳总结\n- 1. addChildViewController:向父VC中添加子VC，添加之后自动调用willMoveToParentViewController: superVC\n- 2. removeFromParentViewController:将子VC从父VC中移除，移除之后自动调用didMoveToParentViewController: nil\n- willMoveToParentViewController:当向父VC添加子VC之后，该方法会自动调用。若要从父VC移除子VC，需要在移除之前调用该方法，传入参数nil。\n- didMoveToParentViewController:\n当向父VC添加子VC之后，该方法不会被自动调用，需要显示调用告诉编译器已经完成添加（事实上不调用该方法也不会有问题，不太明白）;\n从父VC移除子VC之后，该方法会自动调用，传入的参数为nil,所以不需要显示调用。\n\n\n"
    }
  ]
}