{
  "title": "iOS 音频",
  "cells": [
    {
      "type": "markdown",
      "data": "## iPhone OS 主要提供以下了几种播放音频的方法\n1. System Sound Services, 主要用来播放铃声，而且限制的音频时长小于30秒。\n2. AVAudioPlayer，高级的上层框架，可以播放本地或者网络流\n3. Audio Queue Services, 可以实现对声音的控制，比如播放速度\n4. openAL, 主要用于游戏的音频播放\n\n## 1. 基本概念\n\n### 音频格式\n1. 对声音进行采样、量化过程被称为脉冲编码调制（Pulse Code Modulation），简称PCM。pcm是原始的无损音频文件，使用pcm压缩成不同格式的音频，其中有无损音频格式(ALAC、APE、FLAC)，和有损音频格式(MP3、AAC、OGG、WMA)两种，其中Mp3格式最为常用。\n\n### 码率\n1. 码率（BitRate）代表了MP3数据的压缩质量,现在常用的码率有128kbit/s、160kbit/s、320kbit/s等等,码率越高声音质量也越高。mp3的的编码格式有固定码率(constant bitrate, CBR)和可变码率(Variable bitrate, vbr)。\n2. 音频的组成: 歌曲信息(音频格式，歌手，时长) + 音频文件(真正的声音)\n3. MP3格式中的数据通常由两部分组成，一部分为ID3用来存储歌名、演唱者、专辑、音轨数等信息，另一部分为音频数据。音频数据部分以帧(frame)为单位存储，每个音频都有自己的帧头，如图所示就是一个MP3文件帧结构图（图片同样来自互联网）。MP3中的每一个帧都有自己的帧头，其中存储了采样率等解码必须的信息，所以每一个帧都可以独立于文件存在和播放，这个特性加上高压缩比使得MP3文件成为了音频流播放的主流格式。帧头之后存储着音频数据，这些音频数据是若干个PCM数据帧经过压缩算法压缩得到的，对CBR的MP3数据来说每个帧中包含的PCM数据帧是固定的，而VBR是可变的。\n4. ![mp3frame.jpg](quiver-image-url/32025B8B6FD48E62B32BBFE19BB11D8A.jpg)"
    },
    {
      "type": "markdown",
      "data": "## 音频播放流程\n1. 读取mp3文件\n2. 解析采集率，码率，时长等信息，分离mp3的音频帧\n3. 对分离出来的音频解码得到pcm数据\n4. 对pcm数据进行音效处理(均衡器，混响等，非必须)\n5. 把pcm的音频文件解码成音频信号\n6. 把音频信号交给硬件播放\n7. 重复1~6步骤\n\n\n## ios的media框架的功能说明：\n1. Audio File Services：读写音频数据，可以完成播放流程中的第2步\n2. Audio File Stream Services：对音频进行解码，可以完成播放流程中的第2步\n3. Audio Converter services：音频数据转换，可以完成播放流程中的第3步\n4. Audio Processing Graph Services：音效处理模块，可以完成播放流程中的第4步\n5. Audio Unit Services：播放音频数据：可以完成播放流程中的第5步、第6步\n6. Extended Audio File Services：Audio File Services和Audio Converter services的结合体\n7. AVAudioPlayer/AVPlayer(AVFoundation)：高级接口，可以完成整个音频播放的过程（包括本地文件和网络流播放，第4步除外）\n8. Audio Queue Services：高级接口，可以进行录音和播放，可以完成播放流程中的第3、5、6步\n9. OpenAL：用于游戏音频播放，暂不讨论"
    },
    {
      "type": "markdown",
      "data": "## 音效播放, 播放小于30秒的wav,acc等音效\n```objc\nNSURL *path = [[NSBundle mainBundle] URLForResource:@\"buyao.wav\" withExtension:nil];\n    SystemSoundID soundID = 0;\n    \n    AudioServicesCreateSystemSoundID((__bridge CFURLRef _Nonnull)(path), &soundID);\n    \n    if (soundID) {\n        AudioServicesPlaySystemSoundWithCompletion(soundID, ^{\n            AudioServicesDisposeSystemSoundID(soundID);\n        });\n    }\n```\n\n## avplayer播放音频\n1. 播放本地，拉取音频到文件夹，建立一个group\n```objc\nNSURL *URL =  [[NSBundle mainBundle] URLForResource:@\"1201111234.mp3\" withExtension:nil];\n    NSError *error;\n    self.player = [[AVAudioPlayer alloc] initWithContentsOfURL:URL error:&error];\n    // 准备播放\n    [self.player prepareToPlay];\n    NSLog(@\"时长:%f\", self.player.duration);\n    assert(error == nil);\n    \n    if ([self.player isPlaying]) return;\n    // 播放\n    [self.player play];\n```"
    },
    {
      "type": "text",
      "data": "## 后台播放<div>1. 设置音乐播放的后台的audiosession</div><div>```</div><div><p style=\"margin: 0px; font-size: 16px; line-height: normal; font-family: 'PingFang SC'; color: rgb(113, 113, 113);\"><span style=\"line-height: normal; font-family: Menlo; font-variant-ligatures: no-common-ligatures;\">// </span><span style=\"font-variant-ligatures: no-common-ligatures\">音频会话</span></p>\n<p style=\"margin: 0px; font-size: 16px; line-height: normal; font-family: Menlo; color: rgb(71, 156, 172);\"><span style=\"font-variant-ligatures: no-common-ligatures; color: #c1b570\">&nbsp; &nbsp; </span><span style=\"font-variant-ligatures: no-common-ligatures\">AVAudioSession</span><span style=\"font-variant-ligatures: no-common-ligatures; color: #c1b570\"> *sesion = [</span><span style=\"font-variant-ligatures: no-common-ligatures\">AVAudioSession</span><span style=\"font-variant-ligatures: no-common-ligatures; color: #c1b570\"> </span><span style=\"font-variant-ligatures: no-common-ligatures\">sharedInstance</span><span style=\"font-variant-ligatures: no-common-ligatures; color: #c1b570\">];</span></p>\n<p style=\"margin: 0px; font-size: 16px; line-height: normal; font-family: Menlo; color: rgb(113, 113, 113);\"><span style=\"font-variant-ligatures: no-common-ligatures; color: #c1b570\">&nbsp; &nbsp; </span><span style=\"font-variant-ligatures: no-common-ligatures\">// </span><span style=\"line-height: normal; font-family: 'PingFang SC'; font-variant-ligatures: no-common-ligatures;\">设置后台播放</span></p>\n<p style=\"margin: 0px; font-size: 16px; line-height: normal; font-family: Menlo; color: rgb(71, 156, 172);\"><span style=\"font-variant-ligatures: no-common-ligatures; color: #c1b570\">&nbsp; &nbsp; [sesion </span><span style=\"font-variant-ligatures: no-common-ligatures\">setCategory</span><span style=\"font-variant-ligatures: no-common-ligatures; color: #c1b570\">:</span><span style=\"font-variant-ligatures: no-common-ligatures\">AVAudioSessionCategoryPlayback</span><span style=\"font-variant-ligatures: no-common-ligatures; color: #c1b570\"> </span><span style=\"font-variant-ligatures: no-common-ligatures\">error</span><span style=\"font-variant-ligatures: no-common-ligatures; color: #c1b570\">:</span><span style=\"font-variant-ligatures: no-common-ligatures; color: #c2584f\">nil</span><span style=\"font-variant-ligatures: no-common-ligatures; color: #c1b570\">];</span></p>\n<p style=\"margin: 0px; font-size: 16px; line-height: normal; font-family: Menlo; color: rgb(193, 181, 112);\"><span style=\"font-variant-ligatures: no-common-ligatures\">&nbsp; &nbsp; [sesion </span><span style=\"font-variant-ligatures: no-common-ligatures; color: #479cac\">setActive</span><span style=\"font-variant-ligatures: no-common-ligatures\">:</span><span style=\"font-variant-ligatures: no-common-ligatures; color: #c2584f\">YES</span><span style=\"font-variant-ligatures: no-common-ligatures\"> </span><span style=\"font-variant-ligatures: no-common-ligatures; color: #479cac\">error</span><span style=\"font-variant-ligatures: no-common-ligatures\">:</span><span style=\"font-variant-ligatures: no-common-ligatures; color: #c2584f\">nil</span><span style=\"font-variant-ligatures: no-common-ligatures\">];</span></p></div><div>```</div><div>2. 设置项目的后台模式</div><div><br></div><div><img src=\"quiver-image-url/1CDC5F3A58157D23AEB3429745395C42.png\" alt=\"B17229C6-B1C9-4198-B08A-BC74E931951D.png\"></div>"
    },
    {
      "type": "markdown",
      "data": "## avaudiosession实现外部中断时暂停和恢复播放\n1. 设置avaudiosession为后台播放\n2. 注册通知，监听NSNOtifition的变化\n```objc\n#pragma mark -notifition\n\n// 注册监听通知\n- (void)registerNoticition {\n    AVAudioSession *session = [AVAudioSession sharedInstance];\n      [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handleAudioInterruption:) name:AVAudioSessionInterruptionNotification object:session];\n}\n\n// 移除通知\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n// 中断时的处理\n- (void)handleAudioInterruption:(NSNotification *)notice {\n    \n    NSLog(@\"%s\", __func__);\n    NSDictionary *userInfo = notice.userInfo;\n    \n    \n    AVAudioSessionInterruptionType type =  [[userInfo objectForKey:AVAudioSessionInterruptionTypeKey] integerValue];\n    if (type == AVAudioSessionInterruptionTypeBegan) { // 开始\n        [self.locailPlayer pause];\n    }else {\n        AVAudioSessionInterruptionOptions option = [[userInfo objectForKey:AVAudioSessionInterruptionOptionKey] integerValue];\n        // 用户是否是手动取消的\n        if (option == AVAudioSessionInterruptionOptionShouldResume) {\n            // 回调主线程方法\n            [self performSelectorOnMainThread:@selector(didTouchPlay:) withObject:self waitUntilDone:NO];\n        }\n    }\n}\n```\n\n## AudioSession的解析\n AudioSession相关的类有两个\n 1. AudioToolBox中的AudioSession (ios7已经废弃了，在ios7一下用这个方式)\n2. AVFoundation中的AVAudioSession (最近的)\n\n\n"
    }
  ]
}