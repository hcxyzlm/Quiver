{
  "title": "网络相关面试题",
  "cells": [
    {
      "type": "markdown",
      "data": "## http协议\n###  超文本传输协议\n- 请求报文\n- ![IMAGE](quiver-image-url/BB3F2E4180ABB5799346EF04FF28EDAF.jpg =1334x750)\n- 响应报文\n- ![IMAGE](quiver-image-url/B77C58F08D6F8CA520350862B7C235F2.jpg =1334x750)\n\n### http的请求方法都有哪些？\n- GET,POST,HEAD,PUT,DELETE,PATCH(补丁)\n\n### get和post的区别\n- get会以请求参数用‘？’分割拼接到url后面，post请求参数放在body里面\n- get请求参数请求有1024长度的限制，post没有限制\n- get方法不安全，post请求比较安全\n\n### 标准答案\n- 从语义的角度来回答\n- get: 获取资源，安全的，幂等的，可缓存的\n- post:处理资源，非安全，非幂等，不可缓存的\n- ![IMAGE](quiver-image-url/9F7506C1799DD3DA010C57963E111F9C.jpg =1334x750)\n\n### 安全性\n- 不应该引起server端的任何状态变化\n- 有get,head,options等方法请求\n\n### 幂等性\n- 同一个请求方法执行多次和执行一次的效果完全相同\n- 有put,delete，get方法\n\n### 可缓存性\n- 请求是否可以缓存\n- 代理服务器有缓存的作用\n- 有get, head方法\n\n### 状态码\n- 1xx，临时响应\n- 2xx，成功\n- 3xx，网络重定向\n- 4xx，请求不可达\n- 5xx，server有异常\n\n### 请求过程\n过程：\n1. 客户端发起HTTPS请求\n2. 服务端的配置\n采用HTTPS协议的服务器必须要有一套数字证书，可以是自己制作或者CA证书。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用CA证书则不会弹出提示页面。这套证书其实就是一对公钥和私钥。公钥给别人加密使用，私钥给自己解密使用。\n传送证书\n3. 这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等。\n4. 客户端解析证书\n这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随即值，然后用证书对该随机值进行加密。\n传送加密信息\n5. 这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。\n6. 服务段解密信息\n服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。\n7. 传输加密后的信息\n这部分信息是服务段用私钥加密后的信息，可以在客户端被还原。\n8. 客户端解密信息\n客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。\nPS: 整个握手过程第三方即使监听到了数据，也束手无策\n- 三次握手\n- 四次握手，第二次挥手客户端与server端已经断开连接了，但是server到客户端连接并没有断开。\n- ![IMAGE](quiver-image-url/5637FD20DA86C14FA727DD474FCB7EF3.jpg =1334x750)\n\n\n### htpp的特点\n- 无连接，可以设置http keep Alive的保持持久连接\n- 无状态，设置cookie/session\n\n### 持久连接的头部字段又哪些？\n![IMAGE](quiver-image-url/476CFE5006DFCA893B8CF4085013EBFB.jpg =1334x750)\n\n### 怎样判断一个请求是否结束?\n- 响应报文：content-length:1024\n- post方式,最后会有一个空的chunked报文\n\n### charles抓包原理是怎么样？(中间人攻击漏洞技术实现)\n![IMAGE](quiver-image-url/11ED795813E33CFF731728AAB0FF2440.jpg =1334x750)\n\n## https与网络安全\n### https\n- https = http + ssl/tls\n- 安全的http\n- ssl位于http和tcp层之间\n\n### https连接建立流程是怎么样？\n![IMAGE](quiver-image-url/82918806DF14A7188F5F9900C9D61707.jpg =1334x750)\n\n### 会话密钥\n- 会话密钥= random s+ random c + 预主密钥\n\n### https建立使用了哪些加密手段？为什么？\n- 非对称加密(建立连接)，耗时操作\n- 对称加密(传输数据)\n\n### 非对称加密\n- 公钥加密，私钥解密\n- 私钥加密，公钥解密\n- ![IMAGE](quiver-image-url/7E48B40CCDBF16B60E085258E6835A2F.jpg =1334x750)\n\n### 公钥加密\n- 加密解密都使用私钥拿到明文数据 \n\n## tcp/udp\n- 传输层协议\n\n### udp特点\n- 无连接\n- 不可靠传输\n- 面向报文(既不合并，也不拆分)\n\n### udp的功能()\n- 复用，分用!\n- [IMAGE](quiver-image-url/A031A1C373585BF6D9D907ADB461A055.jpg =1334x750)\n- 差错检测(20字节的头部)\n- ![IMAGE](quiver-image-url/EDFE71838BBEEB9AAED6CEFC24D0098F.jpg =1334x750)\n\n## tcp(传输控制协议)\n\n### 特点\n- 面向连接\n- 可靠传输\n- 面向字节流\n- 流量控制\n- 拥塞控制\n\n### 面向连接\n- 三次握手，四次挥手\n\n### 为什么要进行三次握手？\n- syn报文超时的时候来解答，如果没有三次握手，server会引起两次socket连接\n\n### 四次挥手\n- 全双工方向传输\n- ![IMAGE](quiver-image-url/4C66706D85ED6F753A6063CFDB742FA7.jpg =1334x750)\n\n### 可靠传输\n- 无差错\n- 不丢失\n- 不重复\n- 按序到达\n- ![IMAGE](quiver-image-url/28CD66E956A7AD599AEEA766A7DAA34E.jpg =1334x750)\n- ![IMAGE](quiver-image-url/A3ECDDEA54B8D45FD50021567C13CCBD.jpg =1334x750)\n- ![IMAGE](quiver-image-url/B5F1A2B6DCF0628E590B89D29E1788B4.jpg =1334x750)\n- ![IMAGE](quiver-image-url/3E92E7042E69F7794CDC2CEBFC4EC650.jpg =1334x750)\n\n### 流量控制\n- 滑动窗口协议\n- 实现流量控制\n- tcp头部直接可以动态修改滑动窗口的大小\n- ![IMAGE](quiver-image-url/CAE802E93FBB315F0CF77593904D6F8F.jpg =1334x750)\n\n### 拥塞控制\n- 慢开始，拥塞避免\n- 快恢复，快重传 \n- ![IMAGE](quiver-image-url/97E6F82399EC9265C26CD01857FB27C9.jpg =1156x652)\n\n## dns\n### dns解析\n- 域名到ip地址的映射，dns解析请求采用udp数据包，且明文\n\n### dns解析查询方式\n- 递归查询，我去给你问一下\n- ![IMAGE](quiver-image-url/BD7B7DDACA72DCA90D7CDA5C6DD6BE0D.jpg =1334x750)\n- 迭代查询\n- ![IMAGE](quiver-image-url/315543028796AB3110C9F559687F476F.jpg =1334x750)\n\n### dns解析的存在哪些问题\n- dns劫持问题，如何避免域名劫持？直接使用预埋ip地址来请求\n- ![IMAGE](quiver-image-url/6C0CEB96EF83BDA3159B0A1DA822635C.jpg =1334x750)\n- dns解析转发问题\n- ![IMAGE](quiver-image-url/7B24EE9BF56B0160A1FFFBF8880845D1.jpg =1334x750)\n\n### 怎样解决dns劫持？\n- httpDNS，在使用dns协议向dns的53端口进行请udp协议求。使用httpdns协议向dns服务器的端口80进行请求\n- ![IMAGE](quiver-image-url/6542E9DDFE22A5756C31571CE313D335.jpg =1334x750)\n- 长连接。长连server\n- ![IMAGE](quiver-image-url/C93426E76D9A1E84C27A7B891CBE7B98.jpg =1334x750)\n\n### dns劫持与http的关系是怎样？\n- 没有关系\n- dns解析发生在http建立连接之前\n- dns解析请求使用udp数据包，端口号53，Http是tcp报文\n\n## session/cookie\n- http协议无状态特点的补偿\n\n### cookie\n![IMAGE](quiver-image-url/28389FA7DCF72747E5DBA31C04F5E3E7.jpg =1334x750)\n- 主要用来记录用户状态，区分用户，状态保存在客户端\n- 客户端发送的cookie在http请求报文的Cooike首部字段中\n- 服务器设置http响应报文在Set-Cooike首付字段\n\n### 怎么样修改cookie\n- 覆盖旧的cookie\n- 覆盖原则：name, path, domain等需要和旧的cookie相同\n- 设置cookie的expires= 过去的一个时间点，或者maxAge=0。再覆盖旧的cookie来达到删除cookie的作用\n\n### cookie的安全\n- 对cookie进行加密处理\n- 只在https上携带cookie\n- 设置cookie设置为http only，防止跨站脚本攻击\n\n### session\n- 记录用户状态，区分用户，状态存在在服务端\n- ![IMAGE](quiver-image-url/774CC5FEC42A3E51595310C37F13E5DD.jpg =1334x750)\n\n### session 和cookie的关系\n- session需要依赖coookie的机制来实现\n\n## 总结\n\n"
    }
  ]
}