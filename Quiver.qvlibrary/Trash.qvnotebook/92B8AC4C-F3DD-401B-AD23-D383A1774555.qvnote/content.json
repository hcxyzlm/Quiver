{
  "title": "view",
  "cells": [
    {
      "type": "markdown",
      "data": "# view核心动画\n\n##  ios的动画\n- 一种是直接操作layer\n- 一种是uiview动画\n\n## 写法格式\n- 首尾式"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "    //需要执行动画的核心代码\n     //设置动画执行时间\n     [UIView setAnimationDuration:2.0];\n     //设置代理\n     [UIView setAnimationDelegate:self];\n     //设置动画执行完毕调用的事件\n     [UIView setAnimationDidStopSelector:@selector(didStopAnimation)];\n     // 动画\n    self.customView.center=CGPointMake(200, 300);\n    // 提交动画\n    [UIView commitAnimations];"
    },
    {
      "type": "markdown",
      "data": "- uiview的写法"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "[UIView animateWithDuration:6.0 delay:1.0 options:UIViewAnimationOptionCurveEaseOut animations:^{\n        // 这里操作隐式动画属性\n        self.myView.alpha = 0.0;\n    } completion:^(BOOL finished) {\n    }];"
    },
    {
      "type": "markdown",
      "data": "\n##CALayer\n- 所有的view内部都有一个layer,比如一个按钮、一个文本标签、一个文本输入框、一个图标等等，这些都是UIView。\n- 其实UIView之所以能显示在屏幕上，完全是因为它内部的一个层。换句话说，UIView本身不具备显示的功能，是它内部的层才有显示功能\n\n## layer跟view的区别\n-  1.其实，对比CALayer，UIView多了一个事件处理的功能。也就是说，CALayer不能处理用户的触摸事件，而UIView可以\n- 2.CCLayer是quartzcore框架的中的，使用之前先要添加quartzcore的framework\n- 3.所以，如果显示出来的东西需要跟用户进行交互的话，用UIView；如果不需要跟用户进行交互，用UIView或者CALayer都可以\n- 4.当然，CALayer的性能会高一些，因为它少了事件处理的功能，更加轻量级\n- 5.CCLayer不能使用UIKit框架的成员，比如UIImageview。要使用quartzcore的类，比如CGImageRef、CGColorRef\n- 6.UIView和CCLayer的关系如下，如果两个UIView是父子关系，那么它们内部的CALayer也是父子关系。\n- 7.CCLayer一样可以通过subviews得到所有的子CCLayer\n\n- 8.CCLayer可以实现动画，比如旋转，切换场景。\n\n## Layer的属性"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "position        // 位置\nanchorPoint     // 锚点\n什么是anchorPoint，他的取值范围，他在图层的哪个位置\nframe          // 位置尺寸\ncornerRadius    // 圆角\nborderWidth     // 圆角边框\nborderColor     // 圆角颜色\nopacity         // 透明度\nshadowOpacity   // 阴影"
    },
    {
      "type": "markdown",
      "data": "- demo"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": " // 阴影透明度\n    //shadowOpacity不透明，1表示透明\n\n    _myView.layer.shadowOpacity = 1;\n    // 阴影颜色\n    _myView.layer.shadowColor = [UIColor yellowColor].CGColor;\n    // 图层的偏移\n   //_myView.layer.shadowOffset = CGSizeMake(10, 10);\n\n    // 阴影的半径图层\n    //_myView.layer.shadowRadius = 10;\n\n    //\n//    _myView.layer.shadowPath = [UIBezierPath bezierPathWithRect:CGRectMake(0, 0, 200, 100)].CGPath;\n\n    // 切圆角\n    _myView.layer.cornerRadius = 50;\n\n    // 边框\n    _myView.layer.borderWidth = 10;\n    _myView.layer.borderColor = [UIColor greenColor].CGColor;\n\n    // 图层透明度\n    _myView.layer.opacity = 0.5;"
    },
    {
      "type": "markdown",
      "data": "## 隐式动画\n- 只有非rootCalyer才有隐式动画,比如控制view的layer就没有\n- 跳进CALayer头文件,找animatable，有这个属性就有隐式动画\n- 怎么取消隐式动画,每执行一个动画，开启一个事物CATransaction，只要setDisableActions等于YES就好\n- 写法:"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "[UIView animateWithDuration:6.0 delay:1.0 options:UIViewAnimationOptionCurveEaseOut animations:^{\n        // 这里操作隐式动画属性\n        self.myView.alpha = 0.0;\n    } completion:^(BOOL finished) {\n    }];"
    },
    {
      "type": "markdown",
      "data": "\n#核心动画\n##CABasicAnimation\n- 做一些简单的 动画\n三维旋转:transform\n二维旋转：transform.rotation\n* scale\n    * 设置图层内容（心）\n    * tovalue:@0.5\n* 总结CABasicAnimation只能在两个值之间做动画，怎么多个值做动画，用CAKeyframeAnimation\n- vluae方式"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": " CAKeyframeAnimation *animation = [CAKeyframeAnimation animation];\nanimation.keyPath = @\"position\";\nNSValue *value1=[NSValue valueWithCGPoint:CGPointMake(100, 100)];\nNSValue *value2=[NSValue valueWithCGPoint:CGPointMake(200, 100)];\nNSValue *value3=[NSValue valueWithCGPoint:CGPointMake(200, 200)];\nNSValue *value4=[NSValue valueWithCGPoint:CGPointMake(100, 200)];\nNSValue *value5=[NSValue valueWithCGPoint:CGPointMake(100, 100)];\nanimation.values=@[value1,value2,value3,value4,value5];\n[_redView.layer addAnimation:group forKey:nil];"
    },
    {
      "type": "markdown",
      "data": "- keypath的方式"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "CAKeyframeAnimation *animation = [CAKeyframeAnimation animation];\nanimation.keyPath = @\"position\";\nCGMutablePathRef path=CGPathCreateMutable();\nCGPathAddEllipseInRect(path, NULL, CGRectMake(150, 100, 100, 100));\nanimation.path=path;\nCGPathRelease(path);"
    },
    {
      "type": "markdown",
      "data": "\n## 帧动画 CAKeyframeAnimation\n- values:能在多个值之间做动画，按照顺序做。\n-path 是多个动画的路径\n- 可以把多个动画value放在按照顺序执行\n * 面向view开发，拖一个view\n   * values:能多个值之间做动画，按照顺序做。\n   * path\n   * 动画节奏(timingFunction)\n   * 代理\n * 图标抖动\n    * 左边旋转右边旋转 -> keyPath(transform.rotation) -> values -> 有点瘸\n\n##转场动画 CATransition\n- 可以做两个控制器的转场动画\n<img src=\"images/转场动画.png\" />"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "CATransition * ca = [CATransition animation];\n   // ca.type = kCATransitionPush;\n   // anim.type = @\"pageCurl\";\n    ca.subtype = kCATransitionFromRight;\n    ca.duration = 0.5;\n    [self.aniMationView.layer addAnimation:ca forKey:nil]"
    },
    {
      "type": "markdown",
      "data": "\n## 动画组CAAnimationGroup\n- 可以把多组动画放在一起执行\n- 同时缩放，平移，旋转"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "CAAnimationGroup *group = [CAAnimationGroup animation];\n\n    CABasicAnimation *scale = [CABasicAnimation animation];\n    scale.keyPath = @\"transform.scale\";\n    scale.toValue = @0.5;\n\n    CABasicAnimation *rotation = [CABasicAnimation animation];\n    rotation.keyPath = @\"transform.rotation\";\n    rotation.toValue = @(arc4random_uniform(M_PI));\n\n    CABasicAnimation *position = [CABasicAnimation animation];\n    position.keyPath = @\"position\";\n    position.toValue = [NSValue valueWithCGPoint:CGPointMake(arc4random_uniform(200), arc4random_uniform(200))];\n\n    group.animations = @[scale,rotation,position];\n\n    [_redView.layer addAnimation:group forKey:nil];"
    },
    {
      "type": "markdown",
      "data": "\n# 实战\n# 图片折叠效果\n\n### 1.如何制作图片折叠效果？\n\n`把一张图片分成两部分显示，上面一部分，下面一部分，折叠上面部分的内容。`\n![](images/Snip20150619_0.png)\n\n\n###2.如何把一张图片分成两部分显示。\n\n搞两个控件，一个显示上半部分，一个显示下半部分，需要用到Layer(图层)的一个属性`contentsRect`,这个属性是可以控制图片显示的尺寸，可以让图片只显示上部分或者下部分，注意:`取值范围是0~1`.\n\nCGRectMake(0, 0, 1, 0.5)   : `表示显示上半部分`\n\nCGRectMake(0, 0.5, 1, 0.5) : `表示显示下半部分`\n![](images/Snip20150618_1.png)\n###3.如何快速的把两部分拼接成一张完整的图片。\n\n\n3.1 首先了解折叠，折叠其实就是旋转，既然需要旋转就需要明确锚点，因为默认都是绕着锚点旋转的。\n\n3.2 上部分内容绕着底部中心旋转，所以设置上部分的锚点为（0.5，1）\n\n3.3 锚点设置好了，就可以确定位置了.\n\n3.4 可以把上下部分重合在一起，然后分别设置上下部分的锚点，\n上部分的锚点为`（0.5，1）`，下部分的锚点为`（0.5，0）`,就能快速重叠了。\n\n![](images/Snip20150619_2.png)\n\n\n###4.如何折叠上部分内容。\n在拖动视图的时候，旋转上部分控件。修改`transform`属性。\n- 可以在上部分和下部分底部添加一个拖动控件（`拖动控件尺寸就是完整的图片尺寸`），给这个控件添加一个pan手势，就能制造一个假象，拖动控件的时候，折叠图片。\n- 计算Y轴每偏移一点，需要旋转多少角度，假设完整图片尺寸高度为200，当y = 200时，上部分图片应该刚好旋转180°，因此`angle = offsetY  * M_PI / 200`;\n- 上部分内容应该是绕着X轴旋转，`逆时针旋转`，因此角度需要为负数。\n"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": " // 获取手指偏移量\n    CGPoint transP = [sender translationInView:_containV];\n\n// 初始化形变\n    CATransform3D transform3D = CATransform3DIdentity;\n\n// 设置立体效果\n    transform3D.m34 = -1 / 1000.0;\n\n// 计算折叠角度，因为需要逆时针旋转，所以取反\n    CGFloat angle = -transP.y / 200.0 * M_PI;\n\n    _topView.layer.transform = CATransform3DRotate(transform3D, angle, 1, 0, 0);\n"
    },
    {
      "type": "markdown",
      "data": "- 为了让折叠效果更加有效果，更加具有立体感，可以给形变设置m34属性，就能添加立体感。\n"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "// 设置M34就有立体感(近大远小)。 -1 / z ,z表示观察者在z轴上的值,z越小，看起来离我们越近，东西越大。\ntransform3D.m34 = -1 / 1000.0;"
    },
    {
      "type": "markdown",
      "data": "\n### 反弹效果\n当手指抬起的时候，应该把折叠图片还原，其实就是把形变清空。"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "   if (sender.state == UIGestureRecognizerStateEnded) { // 手指抬起\n        // 还原\n        [UIView animateWithDuration:0.5 delay:0 usingSpringWithDamping:0.1 initialSpringVelocity:3 options:UIViewAnimationOptionCurveEaseInOut animations:^{\n\n            _topView.layer.transform = CATransform3DIdentity;\n\n        } completion:nil];\n    }"
    },
    {
      "type": "markdown",
      "data": "\n### 阴影效果\n当折叠图片的时候，底部应该有个阴影渐变过程。\n\n-  利用`CAGradientLayer`（渐变图层）制作阴影效果，添加到底部视图上，并且一开始需要隐藏，在拖动的时候慢慢显示出来。\n-  颜色应是由`透明到黑色`渐变,表示阴影从无到有。\n"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "// 创建渐变图层\nCAGradientLayer *shadomLayer = [CAGradientLayer layer];\n\n// 设置渐变颜色\n    shadomLayer.colors = @[(id)[UIColor clearColor],(id)[[UIColor blackColor] CGColor]];\n\n    shadomLayer.frame = _bottomView.bounds;\n\n    _shadomLayer = shadomLayer;\n\n// 设置不透明度 0\n    shadomLayer.opacity = 0;\n\n    [_bottomView.layer addSublayer:shadomLayer];"
    },
    {
      "type": "markdown",
      "data": "\n-  在拖动的时候计算不透明度值，假设拖动200，阴影完全显示，不透明度应该为1，因此 opacity = y轴偏移量 * 1 /  200.0;\n"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": "\n// 设置阴影不透明度\n    _shadomLayer.opacity = transP.y * 1 /  200.0;\n"
    },
    {
      "type": "markdown",
      "data": "-  在手指抬起的时候，需要把阴影设置隐藏，不透明度为0；\n"
    },
    {
      "type": "code",
      "language": "objectivec",
      "data": " if (sender.state == UIGestureRecognizerStateEnded) { // 手指抬起\n        // 还原\n        [UIView animateWithDuration:0.5 delay:0 usingSpringWithDamping:0.1 initialSpringVelocity:3 options:UIViewAnimationOptionCurveEaseInOut animations:^{\n\n            _topView.layer.transform = CATransform3DIdentity;\n\n            // 还原阴影\n            _shadomLayer.opacity = 0;\n\n\n        } completion:nil];\n    }"
    },
    {
      "type": "markdown",
      "data": "\n\n\n"
    }
  ]
}