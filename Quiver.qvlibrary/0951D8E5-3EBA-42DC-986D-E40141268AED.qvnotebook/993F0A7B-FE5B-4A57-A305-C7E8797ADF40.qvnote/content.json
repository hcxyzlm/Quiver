{
  "title": "day01",
  "cells": [
    {
      "type": "markdown",
      "data": "### 学习资料\n\n1\\. 官方网站 <http://reactnative.cn/>\n\n2\\. 小马哥博客 [http://www.jian22shu.com/c/5f409708aca0](http://www.jianshu.com/c/5f409708aca0)\n\n3\\. node环境作用，需要服务器，用node来做服务器\n\n### 相关命令\n\n1.react-native init\n\n 1) 创建ios/android 工程，对应的js文件\n\n 2）下载第三方框架\n\n2.react-native run-ios 编译运行项目\n\n\n### 第一个react-native工程分析工程\n### 编写js代码步骤\n  1. 导入组件(面向组件), React{JSX}\n  2. 导入常用组件。注册组件,样式组件,view组件,text组件\n  3. 创建入口组件\n  4. 创建样式对象，给view来描述样式使用\n  5. 注册程序入口组件，程序启动会注册该组件，并渲染\n\n### 什么时候使用() 和 {}\n  1. 包装对象的时候用{}\n  2. 表达式需要用{}\n  3. 保证组件标签的时候，必须用()，因此只要返回组件，都需要用()\n  4. 用到变量var需要用{}\n```js\n/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n * @flow\n */\n\n// react navite 工程步骤\n// 1. 导入组件(面向组件), React{JSX}\n// React: 默认组件,不需要添加{}\n// Component:非默认组件,需要添加{}\nimport React,{Component} from 'react';\n\n\n// 2. 导入常用组件。注册组件,样式组件,view组件,text组件\n// import React, { Component } from 'react';\nimport {\n    AppRegistry,\n    StyleSheet,\n    Text,\n    View\n} from 'react-native';\n\n\n// 3. 创建入口组件\nexport default class ReactNativeDemo extends Component {\n  render() { // 改方法加载view的时候自动调用,返回一个组件标签\n    // 返回值，需要用（）包住，固定写法\n    var str = 'gogogoggogo';\n    return (\n        <View style={{\n          flex:1,\n          backgroundColor:'red'}}>\n          <Text> {str} </Text>\n          <Text style={myStyle.textView}> hello </Text>\n        </View>\n    );\n  }\n}\n\n/*\n 什么时候用{}，什么时候用()\n 1. 包装对象的时候用{}\n 2. 表达式需要用{}\n 3. 保证组件标签的时候，必须用()\n 4. 用到变量var需要用{}\n\n */\n// 4. 创建样式对象\n/*\n 1. 给create方法传入一个样式对象，描述样式，跟字典用法一样，一个key，一个value值\n\n */\n\nconst styles = StyleSheet.create({\n  // 描述样式\n  // 描述内容view的样式\n  rootView:{\n    flex:1,\n    backgroundColor:'red'\n  }\n});\n\nconst  myStyle = StyleSheet.create({\n  textView:{\n      backgroundColor: 'green'\n\n  }\n});\n\n\n\n//5. 注册程序入口组件\n// 1. 第一个参数：模块名称，与oc的注册模块名称保持一致，不然会报错\n// 2. 第二参数：回调函数，注册完模块，会自动调用，返回程序入口需要渲染的组件,箭头函数,es6开始出的\nAppRegistry.registerComponent('reactNewProject', () => ReactNativeDemo);\n\n```\n\n## CSS布局\n### [css颜色大全](http://www.cnblogs.com/axing/archive/2011/04/09/CSS.html \"title\")\n### 视图边框\n1. 注意点： 一定要设置边框宽度\n```\nborderBottomWidth number 底部边框宽度\nborderLeftWidth number 左边框宽度\nborderRightWidth number 右边框宽度\nborderTopWidth number 顶部边框宽度\nborderWidth number 边框宽度\nborder<Bottom|Left|Right|Top>Color 各方向边框的颜色,<>表示连着一起，例如borderBottomColor\nborderColor 边框颜色\n```\n\n### 外边距\n- 设置组件与组件之间的间距\n  - 注意：第一个组件比较特殊，参照父组件，与父控件之间的间距。\n  - 其他组件间距，相对于上一个组件\n  margin number 外边距\n- 注意点： marginRight和width冲突，如果设置了width, marginRight无效\n-  当设置了属性尺寸，宽高时，marginBottom，marginRight无效\n-  marginLeft，marginTop肯定有效果\n```\nmarginBottom number 下外边距\nmarginHorizontal number 左右外边距\nmarginLeft number 左外边距\nmarginRight number 右外边距\nmarginTop number 上外边距\nmarginVertical number 上下外边距\n```\n\n### 颜色二进制\n```\n// 二进制颜色\nbackgroundColor:'rgba(100, 268, 50, 0.5)', // 透明效果\nbackgroundColor:'rgb(100, 268, 50)',\n```\n\n### 绝对定位和相对定位（需求: 一个view设置了尺寸，但是显示到右下角） \n```\nposition:'absolute',| 'relative'\nbottom: 距离父控件下边\nright: 距离右边\n\n\nconst styles = StyleSheet.create({\n    paddingView:{\n        // backgroundColor:'blue',\n        // 二进制颜色\n        // backgroundColor:'rgba(100, 268, 50, 0.5)',\n        backgroundColor:'rgb(100, 268, 50)',\n         width:100,\n        height:100,\n        //绝对/ 相对布局\n        position:'absolute',\n        right:10,\n        bottom:0,\n    },\n});\n```\n"
    }
  ]
}