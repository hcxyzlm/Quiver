{
  "title": "day02-ReactNative之Flex布局",
  "cells": [
    {
      "type": "markdown",
      "data": "1. 当只有一个view时使用css布局，当有多个子控件使用Felx布局\n\n### flex布局\n- 当想快速布局一个组件中所有子组件的时候，可以使用Flex布局\n- 会把当前的组件看成一个容器，他的所有子控件都是他容量的成员\n\n### Flex主轴和侧轴\n- 主轴和侧轴相互垂直\n- 主轴： 决定了容器中子组件的布局方向，水平，垂直\n- 侧轴： 决定了容器中的子组件与主轴垂直的布局\n- 比如： 主轴水平，那么子组件默认就是水平布局，侧轴就是控制子组件在垂直方向的布局\n\n### flexDirection属性\n- 决定了主轴的方向，有四个值，在rn中默认为column\n```\nrow（默认值）：主轴为水平方向，从左向右。依次排列\nrow-reverse：主轴为水平方向，从右向左依次排列\ncolumn：主轴为垂直方向，默认的排列方式，从上向下排列\ncolumn-reverse：主轴为垂直方向，从下向上排列\n```\n- 使用\n```js\nexport default class ReactDemo extends Component {\n  render() {\n    return (\n      <View style={styles.rootView}>\n          <Text style={[styles.text1Style,styles.baseTextStyle]}>1</Text>\n          <Text style={[styles.text1Style,styles.baseTextStyle]}>2</Text>\n          <Text style={[styles.text2Style,styles.baseTextStyle]}>3</Text>\n          <Text style={[styles.text3Style,styles.baseTextStyle]}>4</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n    rootView:{\n        backgroundColor:'darkorange',\n        flex:1,\n        flexDirection:'row'\n    },\n    baseTextStyle:{\n        backgroundColor:'deepskyblue',\n        width:50,\n        height:50,\n        fontSize:15,\n        textAlign:'center',\n        margin:20,\n    }\n});\n```\n\n### flexWrap属性\n- warp 自动排列，一排展示不在，自动布局多行展示\n- nowrap 只排列在一行上，可能会展示不下，导致溢出\n- 使用\n```\nconst styles = StyleSheet.create({\n  // 描述样式\n  // 描述内容view的样式\n  rootView:{\n    flex:1,\n    backgroundColor:'red'\n  },\n    innerView:{\n        backgroundColor:'green',\n      // 外边距\n        marginRight:10, // 距离右边10像素\n        marginTop:20,\n        width:375,\n        height:300,\n        flexDirection:'row',\n        // 展示不下,自动多行排列\n        flexWrap:'wrap',\n  },\n    childStyle:{\n        backgroundColor:'yellow',\n        width:100,\n        height:50,\n        marginLeft:10,\n        marginTop:10\n    }\n\n});\n```\n\n### justifyContent 属性\n- 决定子组件在主轴中具体布局，是靠左，还是居中等\n- 有五个值，默认为flex-start\n```\nflex-start: 子组件向主轴起点对齐，如果主轴水平，从左开始，主轴垂直，从上开始。\nflex-end 子组件向主轴终点对齐，如果主轴水平，从右开始，主轴垂直，从下开始。\ncenter 居中显示，注意：并不是让某一个子组件居中，而是整体有居中效果\nspace-between 均匀分配,相邻元素间距离相同。每行第一个组件与行首对齐，每行最后一个组件与行尾对齐。\nspace-around 均匀分配,相邻元素间距离相同。每行第一个组件到行首的距离和每行最后一个组件到行尾的距离将会是相邻元素之间距离的一半\n```\n\n### alignItems 属性\n- alignItems:决定子组件在测轴中具体布局\n- alignItems有四个值，默认为stretch\n```\nflex-start 子组件向侧轴起点对齐。\nflex-end 子组件向侧轴终点对齐。\ncenter 子组件在侧轴居中。\nstretch 子组件在侧轴方向被拉伸到与容器相同的高度或宽度。\n```\n\n### alignSelf 属性\n- alignSelf:自定义自己的侧轴布局，用于一个子组件设置。\n- 单独适配自己的组件，可以嵌套使用\n- alignSelf有五个值，默认为auto\n```\nauto 继承它的父容器的alignItems属性。如果没有父容器则为 \"stretch\"\nflex-start 子组件向侧轴起点对齐。\nflex-end 子组件向侧轴终点对齐。\ncenter 子组件在侧轴居中。\nstretch 子组件在侧轴方向被拉伸到与容器相同的高度或宽度。\n```\n- 使用\n```js\nexport default class ReactNativeDemo extends Component {\n  render() { // 改方法加载view的时候自动调用,返回一个组件标签\n    // 返回值，需要用（）包住，固定写法\n    return (\n        <View style={styles.rootView}>\n            <View style={styles.innerView}>\n                <View style={styles.childStyle}>\n                    <Text>1</Text>\n                </View>\n                <View style={styles.childStyle}>\n                    <Text>2</Text>\n                </View>\n                <View style={[styles.childStyle, {alignSelf:'flex-start', backgroundColor:'blue'}]}>\n                    <Text>3</Text>\n                </View>\n                <View style={styles.childStyle}>\n                    <Text>4</Text>\n                </View>\n            </View>\n        </View>\n    );\n  }\n}\n```\n\n### flex属性\n- 决定在主轴排布子控件分成多等分，有数字组成\n```\nrootView:{\n    flex:1,\n    flex:5\n  },\n```\n- 使用\n```\nexport default class ReactNativeDemo extends Component {\n    render() { // 改方法加载view的时候自动调用,返回一个组件标签\n        // 返回值，需要用（）包住，固定写法\n        return (\n            <View style={styles.rootView}>\n                <View style={styles.innerView}>\n                    <View style={styles.oneStyle}>\n                        <Text>1</Text>\n                    </View>\n                    <View style={styles.twoStyle}>\n                        <Text>2</Text>\n                    </View>\n                    <View style={styles.thereStyle}>\n                        <Text>3</Text>\n                    </View>\n                </View>\n            </View>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    // 描述样式\n    // 描述内容view的样式\n    rootView:{\n        flex:1,\n        backgroundColor:'red'\n    },\n    innerView:{\n        backgroundColor:'green',\n        // 外边距\n        marginRight:10, // 距离右边10像素\n        marginTop:20,\n        width:375,\n        height:300,\n        flexDirection:'row',\n    },\n    oneStyle:{\n        flex:2,\n        backgroundColor:'yellow',\n    },\n    twoStyle:{\n        flex:1,\n        backgroundColor:'blue',\n    },\n    thereStyle:{\n        flex:1,\n        backgroundColor:'white',\n    }\n\n});\n```\n"
    }
  ]
}