{
  "title": "导航栏统一和使用代码添加storyboard",
  "cells": [
    {
      "type": "markdown",
      "data": "## storyboard的vc通过纯代码添加\n优化点1：storyboard的vc只留LMAppMainVC，首页的四个vc使用纯代码方式添加\n 改进优点：方便新接触的同事可以看到入口的vc,使用纯代码的方式添加vc便于扩展"
    },
    {
      "type": "markdown",
      "data": "关键代码：\n```objc\n关键代码如下：// 添加首页四个页面\n- (void)createNavigationController {\n    \n    // 初始化四个界面\n    LMAllOnlineViewController *allOnLineVC = [[LMAllOnlineViewController alloc] init];\n    LMMineVC *mineVC = [[LMMineVC alloc] init];\n    LMDiscoveryVC *discoveryVC = [[LMDiscoveryVC alloc] init];\n    LMAccountVC *accountVC = [[LMAccountVC alloc] init];\n    \n    // 初始化UINavigationController\n    UINavigationController *allOnLineNAV = [[UINavigationController alloc] initWithRootViewController:allOnLineVC];\n    \n    UINavigationController *mineNAV = [[UINavigationController alloc] initWithRootViewController:mineVC];\n    \n    UINavigationController *discoveryNAV = [[UINavigationController alloc] initWithRootViewController:discoveryVC];\n    \n    UINavigationController *accountNAV = [[UINavigationController alloc] initWithRootViewController:accountVC];\n    \n    // 添加UINavigationController\n    self.viewControllers = @[allOnLineNAV,mineNAV,discoveryNAV,accountNAV];\n}\n\n```"
    },
    {
      "type": "text",
      "data": "遇到的问题: 使用代码方式导致很多界面的vc高度减少了工具栏的高度<div>解决方法：<span style=\"font-family: Arial; font-size: 14px; orphans: 2; widows: 2;\">self.edgesForExtendedLayout = UIRectEdgeNone; &nbsp;改成</span><span style=\"font-family: Menlo, monospace; font-size: 12px; white-space: pre-wrap;\">UIRectEdgeAll</span></div>"
    },
    {
      "type": "markdown",
      "data": "## 导航栏统一\n方案的大体框架:\n  - 隐藏navigationBar，自定义navigationBar，自定义navigationBar上面覆盖一层自定义View，通过view和Button的方式加到自定义view上\n  - 结构如下：\n  - ![34AE91D0-5B3E-4808-B8E9-DB375C969E95.png](quiver-image-url/84F6855501484B475DF699624BDC156A.png)\n  \n### 涉及类\n\n## UIViewController (LMCustomNavBar)，自定义navigationBar\n```objc\n@interface UIViewController (LMCustomNavBar)\n// UINavigationBar\n@property (nonatomic, strong) UINavigationBar *customNaviBar;\n// custom navigationItem\n@property (nonatomic, strong) LMCustomNavigationItem *customNaviItem;\n// 是否显示customNavigationBar\n@property (nonatomic, assign) BOOL hideCustomNaviBar;\n/**\n 添加系统自带\n */\n- (void)addCustomNaviBar;\n- (void)bringNaviBarToFront;\n// 设置导航栏标题\n- (void)setLMVCTitle:(NSString *)title;\n@end\n\n```\n\n## LMCustomNavigationItem 自定NavigationItem，覆盖在navigationBar上面\n```objc\n@interface LMCustomNavigationItem : UIView\n\n/** 标题*/\n@property (nonnull, nonatomic, copy) NSString *title;\n// 可以设置自定义标题view\n@property(nullable, nonatomic, strong) UIView *titleView;\n// 左边导航button\n@property(nullable, nonatomic,strong) UIButton *leftButtonItem;\n// 右边导航button\n@property(nullable, nonatomic,strong) UIButton *rightButtonItem;\n\n// 返回按钮\n@property(nullable,nonatomic,strong) UIButton *backButtonItem;\n\n// 左边按钮\n@property(nullable,nonatomic, copy) NSArray <UIButton *> *leftButtonItems;\n\n// 右边按钮\n@property(nullable,nonatomic, copy) NSArray <UIButton *> *rightButtonItems;\n\n// 是否隐藏左边返回按钮，当在top层的时候为true, 其余为false\n@property(nonatomic,assign) BOOL hidesBackButton;\n// 初始化标题\n- (nullable instancetype)initWithTitle:(nullable NSString *)title;\n\n```\n\n## UIViewController (LMNaviBarItem)， 分类添加左边返回按钮，和右边播放按钮的接口分类\n- 默认使用button和view的方式添加\n\n```objc\n@interface UIViewController (LMNaviBarItem)\n\n// 自定义添加返回事件\n- (void)setBackButtonWithTarget:(UIViewController *)vc action:(SEL)action;\n// 添加分页控制器\n- (void)setLeftNaviSegementButtonItem:(LMSegement *)segement;                  // 左侧分页控制器\n// 添加右测按钮\n- (void)setRightNaviPlayingButtonItem:(LMNavigationBarPlayingButton *)ButtonItem; // 导航栏右侧按钮\n\n// 添加右边导航按钮数组\n- (void)setRightNaviButtonItems:(NSArray *)barItems;\n// 默认添加左边按钮，默认点击事件\n- (void)addLeftBackButton;\n/**\n *  向指定的视图控制器添加导航栏上右侧的播放按钮\n */\n- (void)addRightNavigationPlayingButton;\n/**\n *  检测播放状态，在viewWillAppear中调用\n */\n- (void)checkPlayManagerPlayState;\n```\n\n## 使用\n新建vc\n```objc\n- (void)setupNavBar {\n    // 添加自定义naviBar\n    [self addCustomNaviBar];\n    // 设置标题\n    [self setLMVCTitle:@\"VIP会员\"];\n    // 添加导航栏返回按钮\n    [self addLeftBackButton];\n    // 添加导航栏右侧播放按钮\n    [self addRightNavigationPlayingButton];\n}\n```\n## 业务测试\n### 书籍详情业务，业务逻辑：有播放按钮时下载按钮靠在播放按钮左边，无播放状态时停靠在右边\n原来的逻辑：\n// 每次检测播放状态时，就跳转下载和播放按钮位置\n``` objc\n/**\n *  自动调整播放按钮位置，当没有播放的时候，调整播放按钮在最靠左的位置\n */\n- (void)adjustPlayingItemPostion {\n    NSMutableArray *rightNavs = [NSMutableArray arrayWithArray:self.customNavigatioItem.rightBarButtonItems];\n    if (rightNavs.count <= 1) {\n        return;\n    }\n    \n    if (!((UIBarButtonItem *)rightNavs.firstObject).target && rightNavs.count <= 2) {\n        return;\n    }\n    \n    // 判断是否包含有LMNavigationBarPlayingButton类型\n    UIBarButtonItem *playButtonItem = nil;\n    for (UIBarButtonItem *custromItem in rightNavs) {\n        if ([custromItem.customView isKindOfClass:[LMNavigationBarPlayingButton class]]) {\n            if (((LMNavigationBarPlayingButton *)custromItem.customView).buttonType == NavigationBarPlayinButtonTypePlaying) {\n                playButtonItem = custromItem;\n                break;\n            }\n        }\n    }\n    // 是否存在\n    if (playButtonItem) {\n        NSInteger rightPlayIndex = [rightNavs indexOfObject:playButtonItem];\n        if (self.rightPlayingItem.hidden) {\n            if (rightPlayIndex != rightNavs.count-1) {\n                [rightNavs removeObject:playButtonItem];\n                [rightNavs addObject:playButtonItem];\n                [self.customNavigatioItem setRightBarButtonItems:rightNavs];\n            }\n        }else {\n            // 替换回来原来第二个位置\n            if (rightPlayIndex!=1) {\n                [rightNavs removeObject:playButtonItem];\n                [rightNavs insertObject:playButtonItem atIndex:1];\n                [self.customNavigatioItem setRightBarButtonItems:rightNavs];\n            }\n        }\n    }\n}\n```\n## 现在的方案，改进\n使用autolayout 布局,如果播放状态为没有播放，设置playingItem的width = 0\n```objc\n- (void)updateDownLoadBarPostion {\n    \n    if (!self.rightPlayingItem.hidden) {\n        \n        [self.rightPlayingItem mas_updateConstraints:^(MASConstraintMaker *make) {\n            make.width.mas_equalTo(40);\n        }];\n    }else {\n        [self.rightPlayingItem mas_updateConstraints:^(MASConstraintMaker *make) {\n            make.width.mas_equalTo(0);\n        }];\n    }\n}\n```\n### 好处\n1. 使用button方式添加导航栏，位置容易确定\n2. 有比较好的阅读性，便于维护\n\n### 不好\n不能做到每个逻辑界面统一，每个vc都有这样的业务都必须添加这样的逻辑\n\n## 测试vc\nvip会员\n听友会\n书籍详情\n"
    }
  ]
}